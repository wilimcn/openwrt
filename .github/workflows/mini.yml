# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: mini

on:
  repository_dispatch:
  workflow_dispatch:
  push:
    branches: 
      - master


env:
  REPO_URL: https://github.com/coolsnowwolf/openwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  #CONFIG_FILE: .config
  #DIY_P1_SH: diy-part1.sh
  #DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai


permissions:
  contents: read

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-20.04

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          df -h
    
      - name: 自定义插件
        run: |
          cd package
          mkdir packages
          cd packages
          git clone https://github.com/xiaorouji/openwrt-passwall.git
      - name: Update feeds
        run: |
          #sed -i '$a src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
          sed -i '$a src-git small8 https://github.com/kenzok8/small-package' feeds.conf.default
          #sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          #git pull
          ./scripts/feeds update -a
          ./scripts/feeds install -a
                   
          
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          # 主题更换
          sed -i 's/192.168.1.1/192.168.5.1/g' package/base-files/files/bin/config_generate
          sed -i "s/OpenWrt /$(date +%Y.%m.%d) by WINAS /g" package/lean/default-settings/files/zzz-default-settings
          
          
          # 常用LuCI插件选择:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-socat=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-tinyproxy=y
          #CONFIG_PACKAGE_luci-app-openvpn=y
          #CONFIG_PACKAGE_luci-app-wolplus=y
          #CONFIG_PACKAGE_luci-app-ddns-go=y
          EOF
          #################################
          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt7620=y
          CONFIG_TARGET_ramips_mt7620_DEVICE_xiaomi_miwifi-mini=y
          
          CONFIG_HAS_TESTING_KERNEL=y
          CONFIG_TESTING_KERNEL=y
          CONFIG_LINUX_6_1=y
          #CONFIG_TARGET_x86=y
          #CONFIG_TARGET_x86_64=y
          #CONFIG_TARGET_x86_64_Generic=y         
          
          # wifi:
          #CONFIG_PACKAGE_kmod-cfg80211=y
          #CONFIG_PACKAGE_kmod-mac80211=y
          #CONFIG_PACKAGE_MAC80211_DEBUGFS=y
          #CONFIG_PACKAGE_MAC80211_MESH=y
          CONFIG_PACKAGE_kmod-mt76-core=y
          CONFIG_PACKAGE_kmod-mt76x02-common=y
          CONFIG_PACKAGE_kmod-mt76x2=y
          CONFIG_PACKAGE_kmod-mt76x2-common=y
          #CONFIG_PACKAGE_kmod-rt2800-lib=y
          #CONFIG_PACKAGE_kmod-rt2800-mmio=y
          #CONFIG_PACKAGE_kmod-rt2800-soc=y

          
         
          # IPv6支持:
 
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF
          # ========================固件定制部分结束========================
          # ===============================================================
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
     
      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true

